#!/bin/sh -e
#
# Script de compilación de KISS para el controlador NVIDIA 470.256.02
# Adaptado desde un script para la versión 525. Incluye soporte para X11.
#
# Uso: build /ruta/al/destino/del/paquete 470.256.02
#

# Asegura que KERNEL_UNAME tenga un valor, usando el kernel actual como predeterminado.
: "${KERNEL_UNAME:=$(uname -r)}"

# --- Extracción del Instalador ---
echo "--> Extrayendo el instalador de NVIDIA..."
sh "NVIDIA-Linux-x86_64-${2}.run" --extract-only
cd "NVIDIA-Linux-x86_64-${2}"

# --- Parcheado 

cd kernel

patch -p1 -i ../../0001-Fix-conftest-to-ignore-implicit-function-declaration.patch
patch -p1 -i ../../0002-Fix-conftest-to-use-a-short-wchar_t.patch
patch -p1 -i ../../0003-Fix-conftest-to-use-nv_drm_gem_vmap-which-has-the-se.patch
patch -p1 -i ../../kernel-6.10.patch
patch -p1 -i ../../kernel-6.12.patch
#patch -p1 -i ../../nvidia-470xx-fix-linux-6.13.patch
##patch -p1 -i ../../nvidia-470xx-fix-linux-6.14.patch
#patch -p1 -i ../../nvidia-470xx-fix-linux-6.15.patch
cd ..
patch -p1  -i ../gcc-15.patch


# --- Creación de la estructura de directorios ---
echo "--> Creando la estructura de directorios del paquete..."
mkdir -p \
    "$1/usr/bin" \
    "$1/usr/lib/gbm" \
    "$1/usr/lib/xorg/modules/drivers" \
    "$1/usr/share/man/man1" \
    "$1/usr/share/egl/egl_external_platform.d" \
    "$1/usr/share/glvnd/egl_vendor.d" \
    "$1/usr/share/nvidia" \
    "$1/usr/share/vulkan/icd.d" \
    "$1/usr/share/vulkan/implicit_layer.d" \
    "$1/etc/OpenCL/vendors/"

# --- Listas de Archivos ---
# Binarios a instalar. Se añade 'xconfig' para la utilidad 'nvidia-xconfig'.
bins="
cuda-mps-control cuda-mps-server modprobe smi debugdump bug-report.sh
persistenced xconfig
"

# Librerías principales. Se añaden 'libnvidia-glx' y 'libnvidia-xctrl' para X11.
libs="
libEGL_nvidia      libGLESv1_CM_nvidia libGLESv2_nvidia
libGLX_nvidia      libnvidia-cbl       libnvidia-compiler
libnvidia-eglcore  libnvidia-encode    libnvidia-fbc
libnvidia-glcore   libnvidia-glsi      libnvidia-glvkspirv
libnvidia-ml       libnvidia-opencl    libnvidia-ptxjitcompiler
libnvidia-rtcore   libnvidia-tls       libnvcuvid
libcuda            libnvidia-glx       libnvidia-xctrl
"

# Librerías que se copian con su soname completo.
soname_libs="
libOpenCL.so.1.0.0
"

# --- Configuración de EGL, Vulkan y OpenCL ---
echo "--> Configurando los archivos de EGL, Vulkan y OpenCL..."

[ -f 10_nvidia_wayland.json ] && cp 10_nvidia_wayland.json "$1/usr/share/egl/egl_external_platform.d/"
cp 10_nvidia.json "$1/usr/share/glvnd/egl_vendor.d/"

# Parchea los archivos ICD de Vulkan para preferir EGL sobre GLX.
# Esto mejora la compatibilidad con Wayland y no afecta a X11.
for file in nvidia_icd nvidia_layers; do
    [ -f "$file.json" ] || continue
    sed 's|libGLX_nvidia.so.0|libEGL_nvidia.so.0|' "$file.json" > "_${file}.json"
    mv -f "_${file}.json" "$file.json"
done

cp nvidia_icd.json "$1/usr/share/vulkan/icd.d/"
cp nvidia_layers.json "$1/usr/share/vulkan/implicit_layer.d/"

cp nvidia.icd "$1/etc/OpenCL/vendors/"

# --- Instalación de Componentes de X11 ---
echo "--> Copiando componentes específicos para X11..."
cp nvidia_drv.so "$1/usr/lib/xorg/modules/drivers/"

# --- Instalación de Archivos Generales ---
echo "--> Copiando perfiles de aplicación, binarios y librerías..."

cp "nvidia-application-profiles-${2}-rc" \
   "nvidia-application-profiles-${2}-key-documentation" \
   "$1/usr/share/nvidia/"

for bin in $bins; do
    cp "nvidia-${bin}" "$1/usr/bin/"
    [ -f "nvidia-${bin}.1.gz" ] && cp "nvidia-${bin}.1.gz" "$1/usr/share/man/man1/"
done

chmod 4755 "$1/usr/bin/nvidia-modprobe"

for lib in $libs; do
    [ -f "${lib}.so.${2}" ] && cp "${lib}.so.${2}" "$1/usr/lib/"
done

for lib in $soname_libs; do
    [ -f "$lib" ] && cp "$lib" "$1/usr/lib/"
done

# --- Creación de Enlaces Simbólicos ---
echo "--> Creando enlaces simbólicos para las librerías..."
for lib in "$1"/usr/lib/*.so*; do
    [ -f "$lib" ] || continue
    soname_field=$(readelf -d "$lib" | grep 'SONAME')
    [ -n "$soname_field" ] || continue
    soname="${lib%/*}/$(echo "$soname_field" | awk -F'[][]' '{print $2}')"
    base=${soname%%.so*}
    [ -e "$soname" ] || ln -sf "${lib##*/}" "${soname}"
    [ -e "${base}.so" ] || ln -sf "${soname##*/}" "${base}.so"
done

# --- Instalación de Firmware (Condicional) ---
if [ -d firmware ]; then
    echo "--> Copiando archivos de firmware..."
    mkdir -p "$1/usr/lib/firmware/nvidia/${2}"
    cp firmware/*.bin "$1/usr/lib/firmware/nvidia/${2}/"
fi

# --- Compilación de Módulos del Kernel ---
echo "--> Compilando e instalando los módulos del kernel..."
cd kernel

make -j"$(nproc)" NV_EXCLUDE_BUILD_MODULES='' KERNEL_UNAME="${KERNEL_UNAME}" modules
make INSTALL_MOD_PATH="$1/usr" INSTALL_MOD_STRIP=1 modules_install

rm -f "$1/usr/lib/modules/"*"/modules."*

echo "--> ¡Compilación completada!"

